<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.mybatis.dynamic.dao.DepartmentMapper">

    <resultMap id="BaseResultMap" type="com.mybatis.dynamic.po.Department">
        <id column="id" property="id" javaType="INT"/>
        <result column="department_name" property="departmentName" jdbcType="DATE"/>
    </resultMap>


    <select id="findById" resultMap="BaseResultMap" parameterType="int">
        select id, department_name from department where id=#{id};
    </select>
    <select id="findAll" resultMap="BaseResultMap">
        select id, department_name from department;
    </select>
    <insert id="add" parameterType="com.mybatis.dynamic.po.Department">
        INSERT INTO department(department_name) VALUES(#{departmentName});
    </insert>


    <!--collection 嵌套结果的方式，定义关联的集合类型元素的封装规则
           -->

    <resultMap id="DepartMap" type="com.mybatis.dynamic.po.Department">
        <id column="did" property="id" javaType="INTEGER"/>
        <result column="depart_name" property="departmentName" jdbcType="VARCHAR"/>
        <!--collection 定义关联集合类型的属性的封装规则
        ofTyp 指定集合中元素的类型
        -->
        <collection property="employees" ofType="com.mybatis.dynamic.po.Employee">
            <!--定义这个集合中元素的封装规则-->
            <id column="eid" property="id" javaType="INTEGER"/>
            <result column="last_name" property="lastName" jdbcType="VARCHAR"/>
            <result column="email" property="email" jdbcType="VARCHAR"/>
            <result column="gender" property="gender" jdbcType="INTEGER"/>
            <result column="d_id" property="dId" jdbcType="INTEGER"/>
        </collection>
    </resultMap>


    <select id="getDepartByIdPlus" resultMap="DepartMap" >
        SELECT d.id did, d.department_name depart_name,
          e.id eid, e.last_name last_name, e.gender gender, e.email email,
          e.d_id d_id
        FROM department d
        LEFT JOIN employee e on d.id = e.d_id
         where d.id=#{id}
    </select>

    <!--借鉴association标签也可以进行 分步查询处理，
       1、先查询部门，再查询员工
          -->



    <resultMap id="DepartMapStep" type="com.mybatis.dynamic.po.Department">
        <id column="id" property="id" javaType="INTEGER"/>
        <result column="depart_name" property="departmentName" jdbcType="VARCHAR"/>
        <!--collection 定义关联集合类型的属性的封装规则
        ofTyp 指定集合中元素的类型
        -->
        <collection property="employees"
                    select="com.mybatis.dynamic.dao.EmployeeMapper.getEmployeeByDepartId"
                    column="{departId=id}" fetchType="lazy">

        </collection>
    </resultMap>

    <select id="getDepartByIdStep" resultMap="DepartMapStep" >
        select id , department_name depart_name from department where id=#{id};
    </select>



    <!--扩展：多列的值传递过去，将多列的值封装map传递
         column="{key1=column1,key2=column2}"

         fetchType="lazy" :表示使用延迟加载
           lazy：延迟
           eager：立即
        -->






























</mapper>