<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mybatis.cache.dao.EmployeeDynamicSqlMapper" >
    <!--自定义javabean的封装规则， type自定义规则的java类型，id是唯一方便引用-->
    <resultMap id="BaseResultMap" type="com.mybatis.cache.po.Employee">
        <id column="id" property="id" javaType="INTEGER"/>
        <result column="last_name" property="lastName" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="gender" property="gender" jdbcType="INTEGER"/>
        <result column="d_id" property="dId" jdbcType="INTEGER"/>
    </resultMap>

    <!-- 动态sql
    if:判断
    • choose (when, otherwise)：分支选择，相当于是switch-case
       如果带了id就有id查询，如果带了lastName就有lastName查询，只会进入其中一个
    • trim (where(封装查询条件), set(封装修改条件)):截取
    • foreach-->


    <!--
        抽取可重用的sql片段。方便后面引用
        1、sql抽取：经常将要查询的列名，或者插入用的列名抽取出来方便引用
        2、include来引用已经抽取的sql：
        3、include还可以自定义一些property，sql标签内部就能使用自定义的属性
                include-property：取值的正确方式${prop},
                #{不能使用这种方式}
    -->
    <sql id="Base_Column_List">
        id, last_name, email, gender, d_id
    </sql>


    <!--查询员工，要求：携带了那个字段 查询条件带上这个字段的值-->


    <select id="getEmployeeByConditionIf"  resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM employee
          <where>
              <!-- test：判断表达式（OGNL）
                   OGNL参照PPT或者官方文档。
                          c:if  test
                   从参数中取值进行判断

                   遇见特殊符号应该去写转义字符：
                   &&： 可以从w3c中 html ISO-8859-1 去查找 ""    这些对应的实体名称

                   lastName!='' 也可以这样写 lastName!=&quot;&quot;
                   -->


              <!--如果查询的时候有些条件没有带 sql拼装会有问题，比如id 没有带，那么怎么处理呢？
               第一种：可以在where查询是使用 where 1=1
               第二种：mybatis 推荐使用where标签将所有的查询条件包括在内。-->
              <if test="id !=null">
                  id=#{id}
              </if>
              <if test="lastName!=null and lastName!=''">
                  and last_name=#{lastName}
              </if>

              <!--email.trim()表示 截取-->
              <if test="email!=null and email.trim()!=''">
                  and email=#{email}
              </if>
              <!-- ognl会进行字符串与数字的转换判断  "0"==0 ，mybatis就会将where标签中拼装的sql，多出来的and或者or去掉
              where只会去掉第一个多出来的and或者or。 如果是 last_name=#{lastName} and 这样的写法 ，where标签是无法去掉多出来的and或者or的-->
              <if test="gender==0 or gender==1">
                  and gender=#{gender}
              </if>
      </where>
    </select>






    <select id="getEmployeeByConditionTrim"  resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM employee
        <!-- 后面多出的and或者or where标签不能解决
             prefix=""：:前缀：trim标签体中是整个字符串拼串 后的结果。
                   prefix给拼接后的整个字符串加一个前缀
             prefixOverrides="":表示 前缀覆盖，也就是表示这个标签体里面多了什么，会自动给你去掉 。
                       去掉整个字符串前面多余的字符
             suffix=""：suffix给拼串后的整个字符串加一个后缀
             suffixOverrides=""： 后缀覆盖：去掉整个字符串后面多余的字符
          -->
        <!-- 自定义字符串的截取规则 -->
         <trim prefix="where" suffixOverrides="and">
             <if test="id !=null">
                 id=#{id} and
             </if>
             <if test="lastName!=null and lastName!=''">
                  last_name=#{lastName} and
             </if>

             <!--email.trim()表示 截取-->
             <if test="email!=null and email.trim()!=''">
                  email=#{email} and
             </if>

             <if test="gender==0 or gender==1">
                  gender=#{gender}
             </if>
         </trim>


    </select>

    <select id="getEmployeeByConditionChoose"  resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM employee
        <where>
            <!--只会进入一个-->
            <choose>
                <when test="id !=null">
                     id=#{id}
                </when>
                <when test="lastName!=null">
                    last_name=#{lastName}
                </when>
                <when test="email!=null">
                    email=#{email}
                </when>
                <otherwise>
                    gender = 0
                </otherwise>
            </choose>
        </where>
    </select>

    <!-- void update(Employee employee);-->
    <update id="update" parameterType="com.mybatis.cache.po.Employee">
        <!--UPDATE-->
        <!--employee-->
        <!--第一种方法 set标签去除多余的，-->
        <!--<set>-->
            <!--<if test="lastName!=null">-->
                <!--last_name=#{lastName},-->
            <!--</if>-->
            <!--<if test="email!=null">-->
                <!--email=#{email},-->
            <!--</if>-->
            <!--<if test="gender!=null">-->
                <!--gender=#{gender}-->
            <!--</if>-->
        <!--</set>-->
        <!--WHERE-->
        <!--id=#{id}-->

        UPDATE
        employee
        <!-- 第二种方法-->
        <trim prefix="set" suffixOverrides=",">
            <if test="lastName!=null">
                last_name=#{lastName},
            </if>
            <if test="email!=null">
                email=#{email},
            </if>
            <if test="gender!=null">
                gender=#{gender}
            </if>
        </trim>
        WHERE
        id=#{id}
    </update>


    <select id="getEmployeeByConditionForeach"  resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM employee
        WHERE id in
        <!--
	 		collection：指定要遍历的集合：
	 			list类型的参数会特殊处理封装在map中，map的key就叫list
	 		item：将当前遍历出的元素赋值给指定的变量
	 		separator:每个元素之间的分隔符
	 		open：遍历出所有结果拼接一个开始的字符
	 		close:遍历出所有结果拼接一个结束的字符
	 		index:索引。遍历list的时候是index就是索引，item就是当前值
	 				      遍历map的时候index表示的就是map的key，item就是map的值

	 		#{变量名}就能取出变量的值也就是当前遍历出的元素
	 	  -->
        <foreach collection="ids" item="item_id" separator=","
                 open="(" close=")" >
            #{item_id}
        </foreach>

        <!-- 也可以这么写
        <foreach collection="ids" item="item_id" separator=","-->
                 <!--open="where id in" close=")" >-->
            <!--#{item_id}-->
        <!--</foreach>-->
    </select>


    <!-- 两个内置参数：
            不只是方法传递过来的参数可以被用来判断，取值。。。
            mybatis默认还有两个内置参数：
            _parameter:代表整个参数
                单个参数：_parameter就是这个参数
                多个参数：参数会被封装为一个map；_parameter就是代表这个map

            _databaseId:如果配置了databaseIdProvider标签。
                _databaseId就是代表当前数据库的别名oracle
         -->

















</mapper>
