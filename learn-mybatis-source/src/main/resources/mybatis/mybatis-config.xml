<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE configuration
 PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
 "http://mybatis.org/dtd/mybatis-3-config.dtd">
<configuration>

	


	<properties resource="config.properties"></properties>
	<settings>
		<!-- 打印查询语句 -->
		<setting name="logImpl" value="STDOUT_LOGGING" />
		<!-- 开启驼峰命名法规则 -->
		<setting name="mapUnderscoreToCamelCase" value="true"/>
		<!--显示的指定每个我们需要更改的配置的值，即使他们是默认的，防止版本更新带来的问题-->
		<!--开启延迟加载-->
		<setting name="lazyLoadingEnabled" value="true"/>
		<!--按需加载-->
		<setting name="aggressiveLazyLoading" value="false"/>
	</settings>

	<!--<settings> 用来设置每一个设置项-->
	<!--<setting name="" value=""/>-->
	<!--</settings>-->

	<!-- typeAliases 设置别名
	     typeAlias：为某个java类型起别名，默认别名就是类名小写
	     alias: 指定新的别名
	    <package name=""/> 批量起别名，但是如果一个包下面有两个相同的类，
	    只是路径不同那么会有两个相同的别名，所以为了区分，可以在类上面加上 注解@alias来区分
	<typeAliases>
		<typeAlias type="com.mybatis.demo.po.Employee" alias="employee"/>

		<package name=""/>
	</typeAliases>
	  -->



	<!--environments 环境配置：mybatis 可以配置多种环境
	            environment：具体环境信息，必须有两个标签， id代表当前环境的唯一标识
	                transactionManager 事务管理器
	                在 Configuration 类中可以了解到，有许多的别名映射
	                  type:事务类型 JDBC(JdbcTransactionFactory)|MANAGED(ManagedTransactionFactory)
	                  自定义事务 实现TransactionFactory 接口，typt指定为全类名

	                dataSource：数据源
                        type:数据源类型 UNPOOLED(UnpooledDataSourceFactory)|POOLED(PooledDataSourceFactory)|JNDI(JndiDataSourceFactory)
                        自定义数据源：实现DataSourceFactory
	    <environment id="">
			 <transactionManager type=""></transactionManager>
			 <dataSource type=""></dataSource>
		 </environment>
	-->




	<environments default="development">

		<environment id="development">
			<transactionManager type="JDBC" />
			<dataSource type="POOLED">
				<property name="driver" value="${jdbc.driver}" />
				<property name="url" value="${jdbc.url}" />
				<property name="username" value="${jdbc.username}" />
				<property name="password" value="${jdbc.password}" />
			</dataSource>
		</environment>
	</environments>



	<!--注意：这写标签的编写有顺序， 这个标签不能写在 environments前面，写在前面会报错
     数据库厂商，使用不同的数据库
        databaseIdProvider
           type="DB_VENDOR":VendorDatabaseIdProvider
           作用就是得到数据库厂商的标识，mybatis就能根据数据库厂商标识来执行不同的sql
               MySQL，Oracle，SQL Server,xxxx
           <databaseIdProvider type="DB_VENDOR">
             为不同的数据库厂商起别名
           <property name="MySQL" value="mysql"/>
           <property name="Oracle" value="oracle"/>
           <property name="SQL Server" value="sqlserver"/>
           </databaseIdProvider>

           上面配置好了之后 需要在mapper.xml中 添加 databaseId来表示是那个数据库厂商

   <select id="getEmployeeById" parameterType="java.lang.Integer" resultMap="BaseResultMap"
     databaseId="">
    -->

	<!-- 将我们写好的sql映射文件（EmployeeMapper.xml）一定要注册到全局配置文件（mybatis-config.xml）中 -->
	<mappers>
		<!--
			mapper:注册一个sql映射
				注册配置文件
				resource：引用类路径下的sql映射文件
					mybatis/EmployeeMapper.xml
				url：引用网路路径或者磁盘路径下的sql映射文件
					file:///var/mappers/AuthorMapper.xml

				注册接口
				class：引用（注册）接口，
					1、有sql映射文件，映射文件名必须和接口同名，并且放在与接口同一目录下；
					2、没有sql映射文件，所有的sql都是利用注解写在接口上;
					  @select ...
					推荐：
						比较重要的，复杂的Dao接口我们来写sql映射文件
						不重要，简单的Dao接口为了开发快速可以使用注解；
		-->
		<!-- <mapper resource="mybatis/EmployeeMapper.xml"/> -->
		<!-- <mapper class="EmployeeMapperAnnotation"/> -->

		<!-- 批量注册：
		 <package name="com.mybatis.demo.dao"/>
		 -->
		<mapper resource="mybatis/EmployeeMapper.xml" />
		<mapper resource="mybatis/DepartmentMapper.xml" />
	</mappers>
</configuration>