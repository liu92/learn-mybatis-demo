<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Config 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.mybatis.source.dao.EmployeeMapper" >
    <!--自定义javabean的封装规则， type自定义规则的java类型，id是唯一方便引用-->
    <resultMap id="BaseResultMap" type="com.mybatis.source.po.Employee">
        <id column="id" property="id" javaType="INTEGER"/>
        <result column="last_name" property="lastName" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="gender" property="gender" jdbcType="INTEGER"/>
        <result column="d_id" property="dId" jdbcType="INTEGER"/>
    </resultMap>

    <sql id="Base_Column_List">
        id, last_name, email, gender, d_id
    </sql>



    <select id="getEmployeeByMap"  resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM employee
        WHERE id=#{id} and last_name=#{lastName}
    </select>

    <!--#{}:可以获取map中的值或者pojo对象属性的值
        ${}:可以获取map中的值或者pojo对象属性的值
        区别：
          #{}：是以预编译的形式，将参数设置到sql语句中；PreparedStatement; 防止sql注入
          ${}: 取出的值直接拼接在sql语句中；会有安全问题
          大多情况下，我们取参数的值都应该去使用#{}

          原始jdbc 不支持占位符的地方我们就可以使用${}进行取值
          比如分库，分表。

          比如下面的这个查询 如果表明用#{tableName}这种方式，会报如下错误
          SELECT id, last_name, email, gender, d_id   FROM ?   WHERE id=? and last_name=?
          You have an error in your SQL syntax; check the manual that corresponds to your MySQL server version for the right syntax to use near ''employee'
          WHERE id=1 and last_name='李四'' at line 5

         <select id="getEmployeeByMap"  resultMap="BaseResultMap">
          SELECT
          <include refid="Base_Column_List"/>
          FROM #{tableName}
          WHERE id=#{id} and last_name=#{lastName}
         </select>

        但是当查询 修改使用${tableName}来时,查询没有问题
          <select id="getEmployeeByMap"  resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM ${tableName}
        WHERE id=#{id} and last_name=#{lastName}


        #{}:更丰富的用法：
            规定参数的一些规则：
            javaType、 jdbcType、 mode（存储过程）、 numericScale、
            resultMap、 typeHandler、 jdbcTypeName、 expression（未来准备支持的功能）；

            jdbcType通常需要在某种特定的条件下被设置：
                在我们数据为null的时候，有些数据库可能不能识别mybatis对null的默认处理。比如Oracle（报错）；

                JdbcType OTHER：无效的类型；因为mybatis对所有的null都映射的是原生Jdbc的OTHER类型，oracle不能正确处理;

                由于全局配置中：jdbcTypeForNull=OTHER；oracle不支持；两种办法
                1、#{email,jdbcType=OTHER};
                2、jdbcTypeForNull=NULL
                    全局配置
                    <setting name="jdbcTypeForNull" value="NULL"/>

    </select>
          -->
    <select id="getEmployeeByIdAndEmail"  resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM employee
        WHERE id=#{id} and email=#{email}
    </select>


    <select id="getEmployeeById" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM employee
        WHERE id=#{id}
    </select>

    <insert id="insert" parameterType="com.mybatis.source.po.Employee">
        INSERT INTO
        employee
        (id,last_name,email,gender,d_id)
        VALUES
        (#{id},#{lastName},#{email},#{gender},#{dId})
    </insert>

    <update id="update" parameterType="com.mybatis.source.po.Employee">
        UPDATE
        employee
        SET  last_name=#{lastName}, email=#{email}, gender=#{gender}, d_id=#{dId}
        WHERE
        id=#{id}
    </update>

    <delete id="deleteById" parameterType="java.lang.Integer">
        DELETE FROM
        employee
        WHERE
        id=#{id}
    </delete>


    <select id="getByName" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM employee
        WHERE last_name=#{lastName}
    </select>


    <!--resultType:如果返回的是一个list集合，要写集合中元素的类型 resultType="com.mybatis.demo.po.Employee"
     这里可以使用resultMap 返回相当于进行映射处理 ,
     也可以使用resultType，在没有开启驼峰命名的规范情况写，这种下面查询出来的字段没有进行映射-->
    <select id="findByLastName"  resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM employee
        WHERE last_name=#{lastName}
    </select>


    <!--返回map-->
    <select id="getEmployeeByIdReturnMap"  resultType="map">
        SELECT
         *
        FROM employee
        WHERE id=#{id}
    </select>


    <!--返回 Map<Integer, Employee>
      这里如果使用   resultType="com.mybatis.demo.po.Employee"
       那么在 EmployeeMapper接口类中会出现返回类型不匹配

       resultMap: 自定义，实现高级结果映射
    -->
    <select id="getEmployeeByLastNameReturnMap"  resultMap="BaseResultMap">
        SELECT
        *
        FROM employee
        WHERE last_name=#{lastName}
    </select>


    <!-- 第一种
     查询员工时同时查询员工对应的部门
     Employee 和 Department之间的对应关系

     resultMap: 自定义，实现高级结果映射

      联合查询：级联属性封装结果集
   -->

    <resultMap id="DiffResultMap" type="com.mybatis.source.po.Employee">
        <id column="id" property="id" javaType="INTEGER"/>
        <result column="last_name" property="lastName" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="gender" property="gender" jdbcType="INTEGER"/>
        <result column="d_id" property="dId" jdbcType="INTEGER"/>
        <!--可以使用 department 属性的属性-->
        <result column="did" property="department.id" jdbcType="INTEGER"/>
        <result column="depart_name" property="department.departmentName" jdbcType="VARCHAR"/>
    </resultMap>

    <!--第二种:
    使用Association 定义关联的单个对象的封装规则-->
    <resultMap id="DiffAssociationResultMap" type="com.mybatis.source.po.Employee">
        <id column="id" property="id" javaType="INTEGER"/>
        <result column="last_name" property="lastName" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="gender" property="gender" jdbcType="INTEGER"/>
        <result column="d_id" property="dId" jdbcType="INTEGER"/>
        <!--使用association 可以指定联合的javaBean对象，
        property="department" 指定那个属性是联合对象-->
        <association property="department" javaType="com.mybatis.source.po.Department">
            <id column="did" property="id" javaType="INTEGER"/>
            <result column="depart_name" property="departmentName" jdbcType="VARCHAR"/>
        </association>
        <!--&lt;!&ndash;可以使用 department 属性的属性&ndash;&gt;-->
        <!--<result column="did" property="department.id" jdbcType="INTEGER"/>-->
        <!--<result column="depart_name" property="department.departmentName" jdbcType="VARCHAR"/>-->
    </resultMap>

    <select id="getEmployeeAndDepart"  resultMap="DiffAssociationResultMap">
       SELECT e.id id, e.last_name last_name, e.gender gender, e.email email,
        e.d_id d_id, d.id did, d.department_name depart_name
       FROM employee e LEFT JOIN department d on e.d_id = d.id
       <!--
        WHERE id=#{id} 这个不要忘记了 e.id  ，不然会识别不到Column 'id' in where clause is ambiguous
       -->
       WHERE e.id=#{id}
    </select>


    <!--第三种 使用association 进行分布查询，先查询员工，在查询部门
      1、先按照查询员工id查询员工信息
      2、根据查询员工信息的d_id查询 部门信息
      3、设置到员工里面去

      4、注意新添加的 DepartmentMapper.xml 文件 一定要注册到 mappers中去，不然会报错
      Mapped Statements collection does not contain value for com.mybatis.demo.dao.DepartmentMapper.findById
    -->

    <resultMap id="DiffResultMapStep" type="com.mybatis.source.po.Employee">
        <id column="id" property="id" javaType="INTEGER"/>
        <result column="last_name" property="lastName" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="gender" property="gender" jdbcType="INTEGER"/>
        <result column="d_id" property="dId" jdbcType="INTEGER"/>
        <!--使用association 可以指定联合的javaBean对象，
             select:表明当前属性是调用select指定的方法查出的结果
             column:指定将那一列的值传给这个方法
             流程：使用select指定的方法查出对象，并封装给property指定的属性
             -->
        <association property="department"
                     select="com.mybatis.simple.dao.DepartmentMapper.findById"
                     column="d_id">
        </association>
    </resultMap>

    <select id="getEmployeeByIdStep" resultMap="DiffResultMapStep">
        SELECT
        <include refid="Base_Column_List"/>
        FROM employee
        WHERE id=#{id}
    </select>

    <!--可以使用延迟加载
    Employee ==>department:
       我们每次查询Employee对象的时候，都将一起查询出来，
        部门信息在我们使用的时候再去查询
        在分段查询的基础上加入 两个配置就可以了

       开启延迟加载
    <setting name="lazyLoadingEnabled" value="true"/>
    按需加载
    <setting name="aggressiveLazyLoading" value="false"/>
   -->


    <!-- ==========================association===================================-->

    <!--场景二
       查询部门的时候部门对应的所有员工信息也查询出来
     -->




    <select id="getEmployeeByDepartId" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM employee
        WHERE d_id=#{departId}
    </select>



    <!--鉴别器：mybatis可以使用discriminator判断某列的值，然后根据某列的值改变封装行为
          封装Employee ：
                 如果查出的是女生就把部门信息查询出来，否则不查询
                 如果是男生，把last_name这一列的值赋值给email
           <discriminator javaType="">
               <case value=""></case>
           </discriminator>-->

    <resultMap id="DiscriminatorResultMap" type="com.mybatis.source.po.Employee">
        <id column="id" property="id" javaType="INTEGER"/>
        <result column="last_name" property="lastName" jdbcType="VARCHAR"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="gender" property="gender" jdbcType="INTEGER"/>
        <result column="d_id" property="dId" jdbcType="INTEGER"/>

        <!--column：指定判断的列名
            javaType：列值对应的java类型-->
            <discriminator javaType="int" column="gender">
                   <!--女生 resultType:指定封装的结果类型
                    如果查出的是女生就把部门信息查询出来，否则不查询-->
                    <case value="0" resultType="com.mybatis.simple.po.Employee">
                        <association property="department"
                                     select="com.mybatis.simple.dao.DepartmentMapper.findById"
                                     column="d_id">
                        </association>
                    </case>
                   <!--男生 resultType:指定封装的结果类型,
                    如果是男生，把last_name这一列的值赋值给email
                    -->
                    <case value="1" resultType="com.mybatis.simple.po.Employee">
                        <id column="id" property="id" javaType="INTEGER"/>
                        <result column="last_name" property="lastName" jdbcType="VARCHAR"/>
                        <result column="last_name" property="email" jdbcType="VARCHAR"/>
                        <result column="gender" property="gender" jdbcType="INTEGER"/>
                        <result column="d_id" property="dId" jdbcType="INTEGER"/>
                    </case>
                </discriminator>
            </resultMap>


    <select id="getEmployeeByIdDiscriminatorStep" resultMap="DiscriminatorResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM employee
        WHERE id=#{id}
    </select>



















</mapper>
